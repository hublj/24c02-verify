// 定义writeEEPROMByte函数
void writeEEPROMByte(uint8_t address, byte value) {
    byte error;
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write(address);
    Wire.write(value);
    error = Wire.endTransmission();
    if (error!= 0) {
        Serial.print("I2C写入错误: ");
        Serial.println(error);
    }
}

// 初始化EEPROM内容（可选）
void initializeEEPROM() 
{
  // 将所有字节初始化为0xFF，表示未初始化的状态
  for (uint8_t i = 0; i < 256
; i++) {
    writeEEPROMByte(i, 0xFF
);
  }
}

// 向EEPROM写入一个字节数据（添加延迟和错误处理）
void writeEEPROM(uint8_t address, const char* data) {
    byte error;
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write(address);
    for (uint16_t i = 0; i < strlen(data); i++) {
        Wire.write(data[i]);
        delayMicroseconds(5000); 
    }
    error = Wire.endTransmission();
    if (error!= 0) {
        Serial.print("I2C write error: ");
        Serial.println(error);
    }
}

// 从EEPROM读取数据（添加延迟和错误处理）
String readEEPROM(uint8_t address, int length) {
    String data = "";
    byte error;
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write(address);
    error = Wire.endTransmission(false);
    if (error!= 0) {
        Serial.print("I2C read pre - error: ");
        Serial.println(error);
        return data;
    }
    Wire.requestFrom(EEPROM_ADDRESS, std::min((size_t)length, (size_t)EEPROM_PAGE_SIZE));
    while (Wire.available()) {
        char c = Wire.read();
        data += c;
        delayMicroseconds(5000); 
    }
    return data;
}





/*
// 将定时设置数据写入EEPROM的函数
void writeTimingSettingsToEEPROM() {
    // 构建定时1设置数据字符串
    char data1[8];
    sprintf(data1, "%02d%02d%02d%c", startHourForGroup1, startMinuteForGroup1, endHourForGroup1, isTimedGroup1? '1' : '0');
    byte dataArray1[EEPROM_PAGE_SIZE];
    for (int i = 0; i < 8; i++) {
        dataArray1[i] = data1[i];
    }
    if (!pageWriteToEEPROM(0, dataArray1, 8)) {
        Serial.println("Failed to write timing settings for Group 1.");
        return;
    }

    // 构建定时2设置数据字符串
    char data2[8];
    sprintf(data2, "%02d%02d%02d%c", startHourForGroup2, startMinuteForGroup2, endHourForGroup2, isTimedGroup2? '1' : '0');
    byte dataArray2[EEPROM_PAGE_SIZE];
    for (int i = 0; i < 8; i++) {
        dataArray2[i] = data2[i];
    }
    if (!pageWriteToEEPROM(8, dataArray2, 8)) {
        Serial.println("Failed to write timing settings for Group 2.");
        return;
    }

    Serial.println("Timing settings written successfully.");
}

*/

// 将定时设置数据写入EEPROM（使用页写入）
void writeTimingSettingsToEEPROM() {
    // 构建定时1的数据字符串
    String data = String(startHourForGroup1, DEC) + String(startMinuteForGroup1, DEC) + String(endHourForGroup1, DEC) + String(endMinuteForGroup1, DEC) + (isTimedGroup1? "1" : "0");

    // 写入定时1的数据到EEPROM（假设页大小为8字节）
    byte dataArray[EEPROM_PAGE_SIZE];
    for (int i = 0; i < data.length(); i++) {
        dataArray[i] = data[i];
    }
    pageWriteToEEPROM(0, dataArray, data.length());

    // 构建定时2的数据字符串
    data = String(startHourForGroup2, DEC) + String(startMinuteForGroup2, DEC) + String(endHourForGroup2, DEC) + String(endMinuteForGroup2, DEC) + (isTimedGroup2? "1" : "0");

    // 写入定时2的数据到EEPROM
    for (int i = 0; i < data.length(); i++) {
        dataArray[i] = data[i];
    }
    pageWriteToEEPROM(8, dataArray, data.length());
}




// 从EEPROM读取定时设置数据的函数，添加数据合法性检查和读取前后延迟
void readTimingSettingsFromEEPROM() {
    delay(20);  // 读取前增加延迟

    // 读取定时1设置
    byte dataArray1[EEPROM_PAGE_SIZE];
    if (readPageFromEEPROM(0, dataArray1, 8)) {
        char data1[8];
        for (int i = 0; i < 8; i++) {
            data1[i] = (char)dataArray1[i];
        }
        if (validateTimingData(data1)) {
            parseTimingData(data1, startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1, isTimedGroup1);
            Serial.println("定时1读取数据成功");
        } else {
            Serial.println("定时1读取数据格式无效");
        }
    } else {
        Serial.println("定时1读取数据失败");
    }

    // 读取定时2设置
    byte dataArray2[EEPROM_PAGE_SIZE];
    if (readPageFromEEPROM(8, dataArray2, 8)) {
        char data2[8];
        for (int i = 0; i < 8; i++) {
            data2[i] = (char)dataArray2[i];
        }
        if (validateTimingData(data2)) {
            parseTimingData(data2, startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2, isTimedGroup2);
            Serial.println("定时2读取数据成功");
        } else {
            Serial.println("定时2读取数据格式无效");
        }
    } else {
        Serial.println("定时2读取数据失败");
    }

    delay(20);  // 读取后增加延迟
}



// 验证定时数据格式的函数
bool validateTimingData(char *data) {
    for (int i = 0; i < 6; i++) {  // 前6个字符应该是数字
        if (data[i] < '0' || data[i] > '9') {
            return false;
        }
    }
    // 第7个字符应该是时间启用标志（假设用'1'表示启用，'0'表示禁用）
    if (data[6]!= '0' && data[6]!= '1') {
        return false;
    }
    return true;
}
/*
// 解析定时数据的函数
void parseTimingData(char *data, int& startHour, int& startMinute, int& endHour, int& endMinute, bool& isTimed) {
    startHour = (data[0] - '0') * 10 + (data[1] - '0');
    startMinute = (data[2] - '0') * 10 + (data[3] - '0');
    endHour = (data[4] - '0') * 10 + (data[5] - '0');
    endMinute = (data[6] - '0') * 10 + (data[7] - '0');
    isTimed = data[6] == '1';
}
*/
void parseTimingData(char *data, int& startHour, int& startMinute, int& endHour, int& endMinute, bool& isTimed) {
    startHour = (data[0] - '0') * 10 + (data[1] - '0');
    startMinute = (data[2] - '0') * 10 + (data[3] - '0');
    endHour = (data[4] - '0') * 10 + (data[5] - '0');
    endMinute = (data[6] - '0') * 10 + (data[7] - '0');
    isTimed = data[6] == '1';


//这里可以控制字符串的数据
    if (startHour < 0 || startHour > 23) {
        startHour = 0; // 或者根据需求设置默认值
    }
    if (startMinute < 0 || startMinute > 59) {
        startMinute = 0;
    }
    if (endHour < 0 || endHour > 23) {
        endHour = 0;
    }
    if (endMinute < 0 || endMinute > 59) {
        endMinute = 0;
    }

    
}

// 页读取函数
bool readPageFromEEPROM(uint8_t startAddress, byte* data, int numBytes) {
    byte error;
    int retryCount = 3;
    while (retryCount > 0) {
        Wire.beginTransmission(EEPROM_ADDRESS);
        Wire.write(startAddress);
        error = Wire.endTransmission(false);
        if (error == 0) {
            Wire.requestFrom(EEPROM_ADDRESS, std::min((size_t)numBytes, (size_t)EEPROM_PAGE_SIZE));
            int i = 0;
            while (Wire.available() && i < numBytes) {
                data[i++] = Wire.read();
                delayMicroseconds(10000);
            }
            return true;
        }
        retryCount--;
        delay(100);
    }
    Serial.print("I2C read page pre - error: ");
    Serial.println(error);
    return false;
}

// 页写入函数（假设页大小为8字节）
void pageWriteToEEPROM(uint8_t startAddress, byte* data, int numBytes) {
    int currentAddress = startAddress;
    int bytesWritten = 0;

    while (bytesWritten < numBytes) {
        byte error;
        Wire.beginTransmission(EEPROM_ADDRESS);
        Wire.write(currentAddress);

        for (int i = 0; i < std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE); i++) {
            Wire.write(data[bytesWritten + i]);
        }

        error = Wire.endTransmission();
        if (error!= 0) {
            Serial.print("I2C page write error: ");
            Serial.println(error);
            return;
        }

        for (int i = 0; i < std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE); i++) {
            delayMicroseconds(5000); 
        }

        currentAddress += std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE);
        bytesWritten += std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE);
    }
}

/*
// 页写入函数
bool pageWriteToEEPROM(uint8_t startAddress, byte* data, int numBytes) {
    int currentAddress = startAddress;
    int bytesWritten = 0;
    int retryCount = 3;
    while (bytesWritten < numBytes) {
        byte error;
        int subRetryCount = 3;
        while (subRetryCount > 0) {
            Wire.beginTransmission(EEPROM_ADDRESS);
            Wire.write(currentAddress);
            for (int i = 0; i < std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE); i++) {
                Wire.write(data[bytesWritten + i]);
            }
            error = Wire.endTransmission();
            if (error == 0) {
                break;
            }
            subRetryCount--;
            delay(100);
        }
        if (subRetryCount == 0) {
            Serial.print("I2C page write error: ");
            Serial.println(error);
            return false;
        }
        for (int i = 0; i < std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE); i++) {
            delayMicroseconds(10000);
        }
        delay(10);
        currentAddress += std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE);
        bytesWritten += std::min((size_t)(numBytes - bytesWritten), (size_t)EEPROM_PAGE_SIZE);
    }
    return true;
}

*/
